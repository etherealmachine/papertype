{"version":3,"sources":["webpack:///./src/App-classes.astroturf.css?879d","App-classes.astroturf.css","App.tsx","index.tsx"],"names":["content","module","i","options","transform","undefined","locals","exports","___CSS_LOADER_API_IMPORT___","push","a","dataURI","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"mJACA,IAAIA,EAAU,EAAQ,IAEA,kBAAZA,IAAsBA,EAAU,CAAC,CAACC,EAAOC,EAAIF,EAAS,MAOhE,IAAIG,EAAU,CAAC,KAAM,EAErB,eAPIC,EAQJ,gBAAqBC,GAER,EAAQ,GAAR,CAA0DL,EAASG,GAE7EH,EAAQM,SAAQL,EAAOM,QAAUP,EAAQM,S,oBCf5CC,EADkC,EAAQ,GAChCC,EAA4B,IAE9BC,KAAK,CAACR,EAAOC,EAAI,y8BAA08B,KAEn+BK,EAAQD,OAAS,CAChB,IAAO,0BACP,MAAS,0BACT,YAAe,yBACf,KAAQ,0BACR,MAAS,0BACT,SAAY,0BACZ,QAAW,2BAEZL,EAAOM,QAAUA,G,4LCRjB,EAAgB,MAsDhB,kBACC,EAAD,4BACA,0DACA,8CACA,gDACA,mDACA,QADA,IACA,OADA,EACA,sFAKA,aACA,kDACA,mD,4CAIA,uBAAAG,EAAA,sEACC,QAAD,6MACC,IAAD,GACA,+BAFA,cACA,EADA,yBAIA,CACA,OACA,WANA,mGADA,oF,sBA8BA,mBACA,uBADA,mBACA,EADA,KACA,EADA,KAEA,uBAqBA,iDACA,KACA,WACA,iBA1BA,MA4BA,sBA5BA,mBA4BA,EA5BA,KA4BA,EA5BA,KA6BA,yBAsBA,+CAnDA,EAoDA,0BApDA,mBAoDA,EApDA,KAoDA,EApDA,KAqDA,yBAeA,qDACA,WACA,qEACA,mCACA,YACA,QAEA,qGACA,2BAEA,gCACA,kCACA,kCACA,2BACA,sCACA,0CACA,wDACA,8FACA,0GAKA,iCACA,0CACA,gGACA,4FACA,sCACA,gDACA,4KACA,oFApEA,YACA,0BACA,qBACA,qBACA,2CACA,IACA,6CACA,0EACA,oBACA,QACA,MAGA,iEACA,KACA,SACA,WAGA,kCAiDA,6BAEA,4FACA,iDACA,+CACA,2KACA,oFAlDA,YACA,0BACA,qBACA,qBACA,2CACA,IACA,wEACA,8BACA,SACA,WAGA,kCAsCA,qBAEA,4FACA,sCACA,8CACA,6GA1GA,WACA,gBACA,IACA,M,2CACA,sBACA,cACA,uBACA,qBA5BA,SAAuBC,GACvB,uBACA,8DAQA,IANA,mBACA,mCACA,aACA,WACA,qBACA,oBACA,YACA,qBAEA,qBACA,SAcA,sCAEA,iBACA,gBACA,kBACA,kCACA,wCACA,uBACA,UACA,eA2FA,+CACA,oFAEA,mCACA,gEAGA,4CACA,OC5NAC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.21e918f8.chunk.js","sourcesContent":["\nvar content = require(\"!!../node_modules/astroturf/css-loader.js!./App-classes.astroturf.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../node_modules/style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../node_modules/astroturf/css-loader.js!./App-classes.astroturf.css\", function() {\n\t\tvar newContent = require(\"!!../node_modules/astroturf/css-loader.js!./App-classes.astroturf.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../node_modules/astroturf/node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \"\\n  ._1K0xKFlE3XhuIq8I1FpjrW {\\n    display: flex;\\n    flex-direction: column;\\n  }\\n  ._2J_xqngm_eIl8ZrigD7lSb {\\n    display: flex;\\n    flex-direction: row;\\n    flex-wrap: wrap;\\n    align-items: center;\\n  }\\n  ._1JSVmurgdOPc-PKM7FF5v {\\n    margin: 10px;\\n  }\\n  ._3jO4CunHV7PC3ncQkrSKW7 {\\n    position: relative;\\n    display: flex;\\n    flex-direction: column;\\n    border: 2px solid black;\\n    border-radius: 5px;\\n    width: 220px;\\n    height: 312px;\\n    box-sizing: border-box;\\n  }\\n  ._2pqPWH7aS4AiIGVWnw7a1f ._3zFNyKBQG3UzEUD87dC0AX {\\n    width: 8.5in;\\n    height: 11in;\\n    display: flex;\\n    flex-direction: column;\\n  }\\n  ._2pqPWH7aS4AiIGVWnw7a1f ._3jyUrJebGbBUHLQ2-JI1UR {\\n    display: flex;\\n    flex-direction: row;\\n  }\\n  ._2pqPWH7aS4AiIGVWnw7a1f ._1JSVmurgdOPc-PKM7FF5v {\\n    margin: 0;\\n    width: 2.5in;\\n    height: 3.5in;\\n  }\\n  ._2pqPWH7aS4AiIGVWnw7a1f ._3jO4CunHV7PC3ncQkrSKW7 {\\n    width: 2.5in;\\n    height: 3.5in;\\n  }\\n\", \"\"]);\n// Exports\nexports.locals = {\n\t\"app\": \"_1K0xKFlE3XhuIq8I1FpjrW\",\n\t\"cards\": \"_2J_xqngm_eIl8ZrigD7lSb\",\n\t\"cardWrapper\": \"_1JSVmurgdOPc-PKM7FF5v\",\n\t\"card\": \"_3jO4CunHV7PC3ncQkrSKW7\",\n\t\"print\": \"_2pqPWH7aS4AiIGVWnw7a1f\",\n\t\"cardPage\": \"_3zFNyKBQG3UzEUD87dC0AX\",\n\t\"cardRow\": \"_3jyUrJebGbBUHLQ2-JI1UR\"\n};\nmodule.exports = exports;\n","import React, { useRef, useState } from 'react';\nimport { css } from 'astroturf';\nimport html2canvas from 'html2canvas';\nimport JSZip from 'jszip';\nimport { Route, BrowserRouter as Router, Switch } from 'react-router-dom';\nimport _ from 'lodash';\n\nconst classes = css`\n  .app {\n    display: flex;\n    flex-direction: column;\n  }\n  .cards {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    align-items: center;\n  }\n  .cardWrapper {\n    margin: 10px;\n  }\n  .card {\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    border: 2px solid black;\n    border-radius: 5px;\n    width: 220px;\n    height: 312px;\n    box-sizing: border-box;\n  }\n  .print .cardPage {\n    width: 8.5in;\n    height: 11in;\n    display: flex;\n    flex-direction: column;\n  }\n  .print .cardRow {\n    display: flex;\n    flex-direction: row;\n  }\n  .print .cardWrapper {\n    margin: 0;\n    width: 2.5in;\n    height: 3.5in;\n  }\n  .print .card {\n    width: 2.5in;\n    height: 3.5in;\n  }\n`;\n\ninterface CardDef {\n  flavor: string\n  rules: string[]\n}\n\ninterface CardDefinition extends CardDef {\n  name: string\n}\n\nconst Card = (props: CardDefinition) => {\n  const { name, flavor, rules } = props;\n  return <div className={classes.card + ' card'}>\n    <h1 className='title'>{name}</h1>\n    <div className='flavor'>{flavor}</div>\n    <div className='rules'>\n      {rules?.map((rule, i) => <div key={i} className='rule'>{rule}</div>)}\n    </div>\n  </div>;\n}\n\nconst CardBack = () => {\n  return <div className={classes.card}>\n    <div className='card-back' />\n  </div>;\n}\n\nasync function GenerateCanvases(refs: { [key: string]: HTMLDivElement }) {\n  return await Promise.all(Object.entries(refs).map(async ([name, ref]) => {\n    const canvas = await html2canvas(ref, {\n      x: ref.offsetLeft, y: ref.offsetTop,\n    });\n    return {\n      name: name,\n      canvas: canvas,\n    };\n  }));\n}\n\nfunction dataURItoBlob(dataURI: string) {\n  if (typeof dataURI !== 'string') {\n    throw new Error('Invalid argument: dataURI must be a string');\n  }\n  const components = dataURI.split(',');\n  var type = components[0].split(':')[1].split(';')[0],\n    byteString = atob(components[1]),\n    byteStringLength = byteString.length,\n    arrayBuffer = new ArrayBuffer(byteStringLength),\n    intArray = new Uint8Array(arrayBuffer);\n  for (var i = 0; i < byteStringLength; i++) {\n    intArray[i] = byteString.charCodeAt(i);\n  }\n  return new Blob([intArray], {\n    type: type\n  });\n}\n\nexport default function App() {\n  const [generatingDownload, setGeneratingDownload] = useState<boolean>(false);\n  const cardRefs: { current: { [key: string]: HTMLDivElement } } = useRef({});\n  const generateImages = () => {\n    const refs = cardRefs.current;\n    if (!refs) return;\n    setGeneratingDownload(true);\n    GenerateCanvases(refs).then(generated => {\n      const zip = new JSZip();\n      generated.forEach(g => {\n        zip.file(g.name + '.png', dataURItoBlob(g.canvas.toDataURL(\"image/png\")));\n      })\n      zip.generateAsync({\n        type: \"base64\"\n      }).then(content => {\n        const a = document.createElement('a');\n        a.href = \"data:application/zip;base64,\" + content;\n        a.download = 'cards.zip';\n        a.click();\n        setGeneratingDownload(false);\n      });\n    });\n  }\n  const savedCardsString = window.localStorage.getItem('papertype-cards');\n  let savedCards = [];\n  if (savedCardsString !== null) {\n    savedCards = JSON.parse(savedCardsString);\n  }\n  const [cards, setCards] = useState<CardDefinition[]>(savedCards);\n  const cardDefUploadRef = useRef<HTMLInputElement>(null);\n  const onCardDefUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files === null) return;\n    const reader = new FileReader();\n    reader.onload = event => {\n      if (event.target === null || event.target.result === null) return;\n      try {\n        const cardsDict = JSON.parse(event.target.result.toString());\n        const cards = Object.entries(cardsDict).map(([name, def]) => {\n          return {\n            name: name,\n            ...def as CardDef,\n          };\n        });\n        window.localStorage.setItem('papertype-cards', JSON.stringify(cards));\n        setCards(cards);\n      } catch (err) {\n        alert(err);\n      }\n    };\n    reader.readAsText(event.target.files[0]);\n  };\n  const savedCss = window.localStorage.getItem('papertype-css');\n  const [css, setCSS] = useState<string>(savedCss || \"\");\n  const cssUploadRef = useRef<HTMLInputElement>(null);\n  const onCssUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files === null) return;\n    const reader = new FileReader();\n    reader.onload = event => {\n      if (event.target === null || event.target.result === null) return;\n      try {\n        window.localStorage.setItem('papertype-css', event.target.result.toString());\n        setCSS(event.target.result.toString());\n      } catch (err) {\n        alert(err);\n      }\n    };\n    reader.readAsText(event.target.files[0]);\n  };\n  const cardDivs = cards.map(def => <div\n    key={def.name}\n    ref={(el: any) => cardRefs.current[def.name] = el} className={classes.cardWrapper}>\n    <Card\n      key={def.name}\n      {...def} />\n  </div>);\n  const cardBack = <div className={classes.cardWrapper} ref={(el: any) => cardRefs.current['Card Back'] = el}>\n    <CardBack />\n  </div>;\n  const allCards = cards.length === 0 ? [] : [cardBack].concat(cardDivs);\n  return <Router>\n    <style>{css}</style>\n    <Switch>\n      <Route path=\"/print\">\n        <div className={classes.app}>\n          <div className={classes.cards + ' ' + classes.print}>\n            {_.chunk(allCards, 9).map((group, i) => <div key={i} className={classes.cardPage}>\n              {_.chunk(group, 3).map((row, j) => <div key={j} className={classes.cardRow}>{row}</div>)}\n            </div>)}\n          </div>\n        </div>\n      </Route>\n      <Route path=\"/\">\n        <div className={classes.app}>\n          <div style={{ display: 'flex', justifyContent: 'space-around', marginTop: '20px' }}>\n            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n              <h1>Step 1</h1>\n              <h2>Upload Card JSON</h2>\n              <div><a href=\"https://raw.githubusercontent.com/etherealmachine/papertype/master/src/examples/scurvy_and_rum.json\">Example</a></div>\n              <input className=\"form-control-file\" type=\"file\" ref={cardDefUploadRef} onChange={onCardDefUpload} accept=\"application/json\" />\n            </div>\n            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n              <h1>Step 2 (Optional)</h1>\n              <h2>Upload Card CSS</h2>\n              <div><a href=\"https://raw.githubusercontent.com/etherealmachine/papertype/master/src/examples/scurvy_and_rum.css\">Example</a></div>\n              <input className=\"form-control-file\" type=\"file\" ref={cssUploadRef} onChange={onCssUpload} accept=\"text/css\" />\n            </div>\n            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n              <h1>Step 3</h1>\n              <h2>Get Your Cards</h2>\n              <button className={\"btn btn-primary d-flex align-items-center\" + (generatingDownload ? \" disabled\" : \"\")} onClick={generateImages}>\n                <span>Download PNGs</span>\n                {generatingDownload && <span className=\"spinner-border text-light\" role=\"status\" />}\n              </button>\n              <div>or</div>\n              <a href=\"/print\">Printable PDF Layout</a>\n            </div>\n          </div>\n          <div className={classes.cards}>\n            {allCards}\n          </div>\n        </div>\n      </Route>\n    </Switch>\n  </Router>;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}